


|*******************************|
| Precedence  |    Operator     |
|-------------------------------|
|      6      |      * / %      |
|      5      |       + -       |
|      4      |     >= > <= <   |
|      3      |       = !=      |
|      2      |       and       |
|      1      |        or       |
*********************************

<ID> = [a-zA-Z_][a-zA-Z_0-9]*

<integer> = [0-9]+

<real> = [0-9]*\.[0-9]+

<character> = '[a-zA-Z0-9_]'

<string> = "([^\\]|\\.)*"

|******************|
|     Grammar      |
********************

<program> ::= <imports> <declarations>

<empty> ::=

<imports> ::= <imports> <import>
            | <empty>

<import> ::= "import" <ID> ";"

<declarations> ::= <declarations> <declaration>
                 | <declaration>

<declaration> ::= <constant>
                | <function>

<constant> ::= <type> <ID> "<-" <expression> ";"

<function> ::= <function_prototype> <compound_stmt>

<type> ::= "()"
         | "int"
         | "real"
         | "string"
         | "bool"
         | "char"
         | <ID>

<function_prototype> ::= <type> <ID> "(" <params> ")"

<params> ::= <param_list>
           | <empty>

<param_list> ::= <param_list> "," <param>
               | <param>

<param> ::= <type> <ID>

<pattern> ::= <ID>

<statements> ::= <compound_stmt>
               | <expression_stmt>
               | <branch_stmt>
               | <iteration_stmt>
               | <return_stmt>
               | <var_dec_stmt>
               | <assignment_stmt>

<compound_stmt> ::= "{" <statement_list> "}"

<statement_list> ::= <statement_list> <statement>
                   | <statement>

<expression_stmt> ::= <expression> ";"

<branch_stmt> ::= "if" "(" <expression> ")" <statement>
                | "if" "(" <expression> ")" <statement> "else" <statement>

<iteration_stmt> ::= "while" "(" <expression> ")" <statement>
                   | "for" "(" <pattern> "in" <expression> ")" <statement>

<return_stmt> ::= "return" ";"
                | "return" <expression> ";"

<var_dec_stmt> ::= <type> <ID> ";"
                 | <type> <ID> "<-" <expression> ";"

<assignment_stmt> ::= <ID> "<-" <expression> ";"

<expression> ::= <binary>
               | <unary>
               | <call>
               | <variable>
               | <literal>
               | <paren_expr>

<binary> ::= <expression> "+" <expression>
           | <expression> "-" <expression>
           | <expression> "*" <expression>
           | <expression> "/" <expression>
           | <expression> "%" <expression>
           | <expression> "<" <experession>
           | <expression> "<=" <experession>
           | <expression> ">" <experession>
           | <expression> ">=" <experession>
           | <expression> "=" <experession>
           | <expression> "!=" <experession>
           | <expression> "and" <experession>
           | <expression> "or" <experession>

<unary> ::= "-" <expression>
          | "!" <expression>

<call> ::= <expression> "(" <arguments> ")"

<arguments> ::= <argument_list>
              | <empty>

<argument_list> ::= <argument_list> "," <expression>
                  | <expression>

<variable> ::= <ID>

<literal> ::= <integer>
            | <real>
            | <boolean>
            | <string>
            | <character>

<boolean> ::= "true"
            | "false"

<paren_expr> ::= "(" <expression> ")"
